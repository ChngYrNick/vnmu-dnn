CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  email TEXT UNIQUE NOT NULL,
  fullName TEXT NOT NULL,
  password TEXT NOT NULL,
  role TEXT NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS sessions (
  sid TEXT PRIMARY KEY,
  expires INTEGER,
  data TEXT
);

CREATE TABLE IF NOT EXISTS pages (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  slug TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS pagesContent (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  pageId INTEGER NOT NULL,
  language TEXT NOT NULL,
  data TEXT NOT NULL,
  FOREIGN KEY (pageId) REFERENCES pages(id) ON DELETE CASCADE,
  UNIQUE (pageId)
);

CREATE TABLE IF NOT EXISTS news (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  slug TEXT NOT NULL UNIQUE,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS newsContent (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  newsId INTEGER NOT NULL,
  language TEXT NOT NULL,
  title TEXT NOT NULL,
  data TEXT NOT NULL,
  FOREIGN KEY (newsId) REFERENCES news(id) ON DELETE CASCADE,
  UNIQUE (newsId)
);

CREATE TABLE IF NOT EXISTS staff (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  slug TEXT NOT NULL UNIQUE,
  email TEXT,
  phone TEXT,
  orderIndex INTEGER DEFAULT 0
);

CREATE TABLE IF NOT EXISTS staffContent (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  staffId INTEGER NOT NULL,
  language TEXT NOT NULL,
  name TEXT NOT NULL,
  position TEXT,
  data TEXT NOT NULL,
  FOREIGN KEY (staffId) REFERENCES staff(id) ON DELETE CASCADE,
  UNIQUE (staffId)
);

CREATE TABLE IF NOT EXISTS specialties (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  slug TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS specialtyContent (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  specialtyId INTEGER NOT NULL,
  language TEXT NOT NULL,
  name TEXT NOT NULL,
  FOREIGN KEY (specialtyId) REFERENCES specialties(id) ON DELETE CASCADE,
  UNIQUE (specialtyId)
);


CREATE TABLE studentMaterials (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  specialtyId INTEGER NOT NULL,
  course INTEGER NOT NULL,
  FOREIGN KEY (specialtyId) REFERENCES specialties(id) ON DELETE CASCADE,
  UNIQUE (specialtyId)
);

CREATE TABLE studentMaterialsContent (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  materialId INTEGER NOT NULL,
  language TEXT NOT NULL,
  data TEXT NOT NULL,
  FOREIGN KEY (materialId) REFERENCES studentMaterials(id) ON DELETE CASCADE,
  UNIQUE (materialId)
);

CREATE TABLE files (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  filename TEXT NOT NULL,
  originalFilename TEXT NOT NULL,
  mimetype TEXT NOT NULL,
  size INTEGER NOT NULL,
  path TEXT NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE pagesFile (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  fileId INTEGER NOT NULL,
  pageId INTEGER NOT NULL,
  FOREIGN KEY (fileId) REFERENCES files(id) ON DELETE CASCADE,
  FOREIGN KEY (pageId) REFERENCES pages(id) ON DELETE CASCADE
);

CREATE TABLE newsFile (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  fileId INTEGER NOT NULL,
  newsId INTEGER NOT NULL,
  FOREIGN KEY (fileId) REFERENCES files(id) ON DELETE CASCADE,
  FOREIGN KEY (newsId) REFERENCES news(id) ON DELETE CASCADE
);

CREATE TABLE staffFile (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  fileId INTEGER NOT NULL,
  staffId INTEGER NOT NULL,
  FOREIGN KEY (fileId) REFERENCES files(id) ON DELETE CASCADE,
  FOREIGN KEY (staffId) REFERENCES staff(id) ON DELETE CASCADE
);


CREATE TABLE studentMaterialsFile (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  fileId INTEGER NOT NULL,
  materialId INTEGER NOT NULL,
  FOREIGN KEY (fileId) REFERENCES files(id) ON DELETE CASCADE,
  FOREIGN KEY (materialId) REFERENCES studentMaterials(id) ON DELETE CASCADE
);
